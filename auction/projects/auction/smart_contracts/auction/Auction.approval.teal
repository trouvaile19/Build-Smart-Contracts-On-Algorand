#pragma version 10

smart_contracts.auction.contract.Auction.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // projects/auction/smart_contracts/auction/contract.py:6
    // class Auction(ARC4Contract):
    txn NumAppArgs
    !
    assert // reject transaction
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.auction.contract.Auction.__init__() -> void:
__init__:
    // projects/auction/smart_contracts/auction/contract.py:7
    // def __init__(self) -> None:
    proto 0 0
    // projects/auction/smart_contracts/auction/contract.py:8-9
    // # set time for auction
    // self.auction_start = UInt64(0)
    byte "auction_start"
    int 0
    app_global_put
    // projects/auction/smart_contracts/auction/contract.py:10
    // self.auction_end = UInt64(0)
    byte "auction_end"
    int 0
    app_global_put
    // projects/auction/smart_contracts/auction/contract.py:11
    // self.asa_amount = UInt64(0)
    byte "asa_amount"
    int 0
    app_global_put
    // projects/auction/smart_contracts/auction/contract.py:12
    // self.asa = Asset() # ASA - Algorand Standard Assets
    byte "asa"
    int 0
    app_global_put
    // projects/auction/smart_contracts/auction/contract.py:13-14
    // # Asset is the token to pay auction
    // self.previous_bidder = Account() # the previous bidder
    byte "previous_bidder"
    global ZeroAddress
    app_global_put
    retsub

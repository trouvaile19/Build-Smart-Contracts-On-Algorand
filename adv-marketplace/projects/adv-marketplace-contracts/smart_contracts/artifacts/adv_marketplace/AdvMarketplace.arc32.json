{
    "hints": {
        "allow_access(string,pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "first_deposit(axfer,uint64,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_price(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(address,asset,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid(pay,asset,uint64,address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "accept_bid(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWR2X21hcmtldHBsYWNlLmNvbnRyYWN0LkFkdk1hcmtldHBsYWNlLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvYWR2X21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwLTExCiAgICAvLyAjIGQsICJNQlIiOiAgTWluaW11bSBCYWxhbmNlIFJlcXVpcmVtZW50CiAgICAvLyBjbGFzcyBBZHZNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AdvMarketplace",
        "methods": [
            {
                "name": "allow_access",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "first_deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "buy_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bid",
                "args": [
                    {
                        "type": "pay",
                        "name": "bid_pay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accept_bid",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}
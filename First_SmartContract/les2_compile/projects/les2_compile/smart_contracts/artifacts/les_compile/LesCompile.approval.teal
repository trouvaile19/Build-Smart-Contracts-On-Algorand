#pragma version 10

smart_contracts.les_compile.contract.LesCompile.approval_program:
    // smart_contracts/les_compile/contract.py:9
    // class LesCompile(ARC4Contract):
    method "create_application(asset,uint64)void"
    method "update_price(uint64)uint64"
    method "buy(pay,uint64)void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_update_price_route@2 main_buy_route@3
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/les_compile/contract.py:14
    // @arc4.abimethod(create="require", allow_actions = ["NoOp"])
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/les_compile/contract.py:9
    // class LesCompile(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/les_compile/contract.py:14
    // @arc4.abimethod(create="require", allow_actions = ["NoOp"])
    callsub create_application
    int 1
    return

main_update_price_route@2:
    // smart_contracts/les_compile/contract.py:19
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/les_compile/contract.py:9
    // class LesCompile(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/les_compile/contract.py:19
    // @arc4.abimethod
    callsub update_price
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_buy_route@3:
    // smart_contracts/les_compile/contract.py:27
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/les_compile/contract.py:9
    // class LesCompile(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/les_compile/contract.py:27
    // @arc4.abimethod
    callsub buy
    int 1
    return


// smart_contracts.les_compile.contract.LesCompile.create_application(asset_id: uint64, price: uint64) -> void:
create_application:
    // smart_contracts/les_compile/contract.py:14-15
    // @arc4.abimethod(create="require", allow_actions = ["NoOp"])
    // def create_application(self, asset_id: Asset, price: UInt64) -> None: #no return
    proto 2 0
    // smart_contracts/les_compile/contract.py:10-11
    // # local storage
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/les_compile/contract.py:16
    // self.asset_id = asset_id.id
    frame_dig -2
    app_global_put
    // smart_contracts/les_compile/contract.py:12
    // price: UInt64
    byte "price"
    // smart_contracts/les_compile/contract.py:17
    // self.price = price
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.les_compile.contract.LesCompile.update_price(new_price: uint64) -> uint64:
update_price:
    // smart_contracts/les_compile/contract.py:19-20
    // @arc4.abimethod
    // def update_price(self, new_price: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/les_compile/contract.py:21-22
    // # Check that txn sender (Txn.sender) must match the creator txn (creator_address)
    // assert Txn.sender == Global.creator_address #'Global' variable
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/les_compile/contract.py:12
    // price: UInt64
    byte "price"
    // smart_contracts/les_compile/contract.py:23-24
    // # update new price
    // self.price = new_price
    frame_dig -1
    app_global_put
    // smart_contracts/les_compile/contract.py:25
    // return new_price
    frame_dig -1
    retsub


// smart_contracts.les_compile.contract.LesCompile.buy(buyer_txn: uint64, quanity: uint64) -> void:
buy:
    // smart_contracts/les_compile/contract.py:27-29
    // @arc4.abimethod
    // # buyer_txn to storage an address & gtxn on BC
    // def buy(self, buyer_txn: gtxn.PaymentTransaction, quanity: UInt64) -> None:
    proto 2 0
    // smart_contracts/les_compile/contract.py:30
    // assert self.price != 0      #check valid money
    int 0
    // smart_contracts/les_compile/contract.py:12
    // price: UInt64
    byte "price"
    // smart_contracts/les_compile/contract.py:30
    // assert self.price != 0      #check valid money
    app_global_get_ex
    assert // check self.price exists
    assert
    // smart_contracts/les_compile/contract.py:31
    // assert Txn.sender == buyer_txn.sender    #check valid sender
    txn Sender
    frame_dig -2
    gtxns Sender
    ==
    assert
    // smart_contracts/les_compile/contract.py:32
    // assert buyer_txn.amount == self.price * quanity // 10 *20  #chẹc
    frame_dig -2
    gtxns Amount
    int 0
    // smart_contracts/les_compile/contract.py:12
    // price: UInt64
    byte "price"
    // smart_contracts/les_compile/contract.py:32
    // assert buyer_txn.amount == self.price * quanity // 10 *20  #chẹc
    app_global_get_ex
    assert // check self.price exists
    frame_dig -1
    *
    int 10
    /
    int 20
    *
    ==
    assert
    // smart_contracts/les_compile/contract.py:34-38
    // itxn.AssetTransfer(
    //      xfer_asset=self.asset_id,   # retrieve asset_id
    //      asset_receiver= Txn.sender,     # send to buyer (asset_receiver
    //      asset_amount=quanity,
    // ).submit()
    itxn_begin
    // smart_contracts/les_compile/contract.py:35
    // xfer_asset=self.asset_id,   # retrieve asset_id
    int 0
    // smart_contracts/les_compile/contract.py:10-11
    // # local storage
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/les_compile/contract.py:35
    // xfer_asset=self.asset_id,   # retrieve asset_id
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/les_compile/contract.py:36
    // asset_receiver= Txn.sender,     # send to buyer (asset_receiver
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/les_compile/contract.py:34
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/les_compile/contract.py:34-38
    // itxn.AssetTransfer(
    //      xfer_asset=self.asset_id,   # retrieve asset_id
    //      asset_receiver= Txn.sender,     # send to buyer (asset_receiver
    //      asset_amount=quanity,
    // ).submit()
    itxn_submit
    retsub
